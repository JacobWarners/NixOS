#!/usr/bin/env nix-shell
#!nix-shell -i sh -p evtest coreutils util-linux gawk
#
# key_counter_daemon.sh
#
# This script listens for events from multiple keyboards and increments a counter.
# The shebang above is required for NixOS to provide the necessary commands.

# --- Configuration ---
COUNTER_FILE="/tmp/waybar_counter.txt"
LOG_FILE="/tmp/key_counter_debug.log"

# Set to "true" to reset the counter to 0 every time the script starts.
RESET_COUNTER_ON_START="true"

# --- IMPORTANT: Set these to unique words from your keyboards' names ---
# Be as specific as possible to avoid grabbing the wrong device.
KEYBOARD_1_HINT="GMMK Pro Keyboard"
KEYBOARD_2_HINT="Translated" # For "AT Translated Set 2 keyboard"

# --- Clear previous log and start fresh ---
echo "--- Key Counter Daemon Started: $(date) ---" > "$LOG_FILE"

# --- Function to find a device path from its name hint ---
find_device_path() {
    local hint="$1"
    # Use awk to find the FIRST block of text for the device matching the hint.
    # The 'exit' command makes it stop after the first match.
    local device_block=$(awk -v RS='\n\n' -v HINT="$hint" '
        $0 ~ "N: Name=.*" HINT ".*" { print $0; exit }
    ' /proc/bus/input/devices)

    if [ -n "$device_block" ]; then
        # From that block, find the event handler (e.g., "event4").
        local event_handler=$(echo "$device_block" | grep "H: Handlers=" | grep -o 'event[0-9]*')
        if [ -n "$event_handler" ]; then
            echo "/dev/input/$event_handler"
        fi
    fi
}

# --- Find keyboard devices automatically ---
KEYBOARD_1_DEVICE=$(find_device_path "$KEYBOARD_1_HINT")
KEYBOARD_2_DEVICE=$(find_device_path "$KEYBOARD_2_HINT")

# Initialize or reset the counter file.
if [ "$RESET_COUNTER_ON_START" = "true" ] || [ ! -f "$COUNTER_FILE" ]; then
    echo 0 > "$COUNTER_FILE"
fi

# --- Function to safely increment the counter ---
# Using flock prevents race conditions if both keyboards are used simultaneously.
increment_counter() {
    flock "$COUNTER_FILE" -c "
        current_count=\$(cat '$COUNTER_FILE');
        next_count=\$((current_count + 1));
        echo \$next_count > '$COUNTER_FILE';
    "
    echo "ACTION: Key press detected. Count is now \$(cat $COUNTER_FILE)." >> "$LOG_FILE"
}

# --- Function to start a listener for a device ---
start_listener() {
    local device_path="$1"
    local device_name="$2"

    if [ -z "$device_path" ]; then
        echo "WARNING: Could not find a keyboard device matching '$device_name'. Skipping." >> "$LOG_FILE"
        return
    fi

    echo "INFO: Starting listener for $device_name at $device_path" >> "$LOG_FILE"
    # Run evtest in a loop for this device.
    evtest "$device_path" | while read -r line; do
        if echo "$line" | grep -q "type 1 (EV_KEY)," && echo "$line" | grep -q ", value 1"; then
            increment_counter
        fi
    done
}

# --- Start listeners for both keyboards in the background ---
start_listener "$KEYBOARD_1_DEVICE" "$KEYBOARD_1_HINT" &
start_listener "$KEYBOARD_2_DEVICE" "$KEYBOARD_2_HINT" &

# --- Wait forever ---
# This keeps the main script alive, which in turn keeps the background listeners running.
wait

